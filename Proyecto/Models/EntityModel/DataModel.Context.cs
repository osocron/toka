//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Proyecto.Models.EntityModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TransportesABCEntities : DbContext
    {
        public TransportesABCEntities()
            : base("name=TransportesABCEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Autos> Autos { get; set; }
        public virtual DbSet<BitacoraDeSolicitud> BitacoraDeSolicitud { get; set; }
        public virtual DbSet<Marcas> Marcas { get; set; }
        public virtual DbSet<Modelos> Modelos { get; set; }
        public virtual DbSet<SolicitudDeTransporte> SolicitudDeTransporte { get; set; }
        public virtual DbSet<TiposTransmision> TiposTransmision { get; set; }
    
        public virtual ObjectResult<CrearAuto_Result> CrearAuto(Nullable<int> idAuto, string folio, Nullable<int> idMarca, Nullable<int> idModelo, string color, Nullable<int> idTipoTransmision, string descripcionEstetica)
        {
            var idAutoParameter = idAuto.HasValue ?
                new ObjectParameter("IdAuto", idAuto) :
                new ObjectParameter("IdAuto", typeof(int));
    
            var folioParameter = folio != null ?
                new ObjectParameter("Folio", folio) :
                new ObjectParameter("Folio", typeof(string));
    
            var idMarcaParameter = idMarca.HasValue ?
                new ObjectParameter("IdMarca", idMarca) :
                new ObjectParameter("IdMarca", typeof(int));
    
            var idModeloParameter = idModelo.HasValue ?
                new ObjectParameter("IdModelo", idModelo) :
                new ObjectParameter("IdModelo", typeof(int));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var idTipoTransmisionParameter = idTipoTransmision.HasValue ?
                new ObjectParameter("IdTipoTransmision", idTipoTransmision) :
                new ObjectParameter("IdTipoTransmision", typeof(int));
    
            var descripcionEsteticaParameter = descripcionEstetica != null ?
                new ObjectParameter("DescripcionEstetica", descripcionEstetica) :
                new ObjectParameter("DescripcionEstetica", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CrearAuto_Result>("CrearAuto", idAutoParameter, folioParameter, idMarcaParameter, idModeloParameter, colorParameter, idTipoTransmisionParameter, descripcionEsteticaParameter);
        }
    
        public virtual ObjectResult<CrearBitacora_Result> CrearBitacora(Nullable<int> idBitacora, Nullable<int> idSolicitud, Nullable<int> idAuto)
        {
            var idBitacoraParameter = idBitacora.HasValue ?
                new ObjectParameter("IdBitacora", idBitacora) :
                new ObjectParameter("IdBitacora", typeof(int));
    
            var idSolicitudParameter = idSolicitud.HasValue ?
                new ObjectParameter("IdSolicitud", idSolicitud) :
                new ObjectParameter("IdSolicitud", typeof(int));
    
            var idAutoParameter = idAuto.HasValue ?
                new ObjectParameter("IdAuto", idAuto) :
                new ObjectParameter("IdAuto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CrearBitacora_Result>("CrearBitacora", idBitacoraParameter, idSolicitudParameter, idAutoParameter);
        }
    
        public virtual ObjectResult<CrearSolicitud_Result> CrearSolicitud(Nullable<int> idSolicitud, Nullable<System.DateTime> fecha, string numeroDeLote)
        {
            var idSolicitudParameter = idSolicitud.HasValue ?
                new ObjectParameter("IdSolicitud", idSolicitud) :
                new ObjectParameter("IdSolicitud", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var numeroDeLoteParameter = numeroDeLote != null ?
                new ObjectParameter("NumeroDeLote", numeroDeLote) :
                new ObjectParameter("NumeroDeLote", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CrearSolicitud_Result>("CrearSolicitud", idSolicitudParameter, fechaParameter, numeroDeLoteParameter);
        }
    }
}
